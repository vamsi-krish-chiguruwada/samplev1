{"version":3,"sources":["comp1.js","App.js","serviceWorker.js","index.js"],"names":["comp1","props","list","map","item","id","key","onClick","event","removeItem","className","App","state","username","pass","auth","authentication","preventDefault","setState","alert","index","findIndex","target","parentElement","temp","splice","this","onChange","value","type","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RASeA,G,YAPD,SAACC,GACX,OACI,4BACKA,EAAMC,KAAKC,KAAI,SAACC,GAAD,OAAS,wBAAKC,GAAMD,EAAME,IAAKF,GAAOA,EAAK,0BAAMG,QAAW,SAACC,GAAD,OAASP,EAAMQ,WAAWD,IAAQE,UAAU,KAA7D,YCgExDC,E,4MA/DbC,MAAS,CAACC,SAAS,GACTC,KAAK,GACLC,MAAK,EACLb,KAAK,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,U,EAGzDc,eAAiB,SAACR,GACfA,EAAMS,iBACsB,YAAxB,EAAKL,MAAMC,UAA8C,cAApB,EAAKD,MAAME,KAChD,EAAKI,SAAS,CAACH,MAAK,IAEtBI,MAAM,uB,EAIVV,WAAa,SAACD,GACZW,MAAM,kCACN,IAAIC,EAAQ,EAAKR,MAAMV,KAAKmB,WAAU,SAACjB,GAAD,OAAQA,IAAOI,EAAMc,OAAOC,cAAclB,MAC5EmB,EAAI,YAAQ,EAAKZ,MAAMV,MAE3BsB,EAAKC,OAAOL,EAAM,GAClB,EAAKF,SAAS,CAAChB,KAAKsB,K,uDAQX,IAAD,OACN,OACA,yBAAKd,UAAU,OACf,4BAAQA,UAAU,cAChB,qCAICgB,KAAKd,MAAMG,KAEZ,6BACE,kBAAC,EAAD,CAAON,WAAciB,KAAKjB,WAAYP,KAAQwB,KAAKd,MAAMV,OACzD,4BAAQK,QAAW,kBAAI,EAAKW,SAAS,CAACH,MAAK,EAAOF,SAAS,GAAIC,KAAK,OAApE,aAGF,6BACE,8BACE,2BAAOa,SAAW,SAAAnB,GAAK,OAAE,EAAKU,SAAS,CAACL,SAASL,EAAMc,OAAOM,SAASC,KAAO,OAAOC,YAAc,cACnG,2BAAOH,SAAW,SAACnB,GAAD,OAAS,EAAKU,SAAS,CAACJ,KAAKN,EAAMc,OAAOM,SAAQC,KAAO,WAAWC,YAAc,aACpG,2BAAOvB,QAAWmB,KAAKV,eAAgBa,KAAK,SAASD,MAAQ,mB,GAlDvDG,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25b8d8f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./comp1.css\";\r\nconst comp1 = (props) =>{\r\n    return(\r\n        <ul>\r\n            {props.list.map((item)=>(<li  id = {item} key={item}>{item}<span onClick = {(event)=>props.removeItem(event)} className=\"x\">X</span></li>))}\r\n        </ul>\r\n    );\r\n}\r\nexport default comp1;","import React from 'react';\nimport './App.css';\nimport Comp1 from \"./comp1\";\n\nclass App extends React.Component {\n\n  state = ({username:\"\",\n            pass:\"\",\n            auth:false,\n            list:[\"item1\",\"item2\",\"item3\",\"item4\",\"item5\",\"item6\"]\n          })\n\n authentication = (event) => {\n    event.preventDefault();\n    if((this.state.username === \"peopler\")&&(this.state.pass === \"interview\")){\n        this.setState({auth:true});\n    }else{\n      alert(\"wrong pin/username\");\n    }\n  }\n\n  removeItem = (event) => {\n    alert(\"are you sure! delete anyway ? \")\n    let index = this.state.list.findIndex((item)=>item===event.target.parentElement.id);\n    let temp =  [...this.state.list];\n\n    temp.splice(index,1);\n    this.setState({list:temp});\n\n\n    \n  }\n\n  \n\n    render(){\n      return(\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          hello,\n        </p>\n        \n        {this.state.auth ?\n        \n        <div>\n          <Comp1 removeItem = {this.removeItem} list = {this.state.list} />\n          <button onClick = {()=>this.setState({auth:false, username:\"\", pass:\"\"})}>sign out</button>\n        </div>:\n        \n        <div>\n          <form>\n            <input onChange ={event=>this.setState({username:event.target.value})} type = \"text\" placeholder = \"user name\"/>\n            <input onChange ={(event)=>this.setState({pass:event.target.value})}type = \"password\" placeholder = \"password\"/>\n            <input onClick = {this.authentication} type=\"submit\" value = \"submit\"/>\n          </form>\n        </div>\n        }\n        \n        \n \n      </header>\n    </div>\n  )  \n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}